// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse-wtp'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    
    // spring-context located at this location
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {

	providedCompile 'javax.servlet:servlet-api:2.5'
	
    // Spring framework uses Jakarta commons logging (JCL) and it has class loader issue with runtime discovery;
    // Hence we will use slf4j. For this we will use bridge to route JCL logs -> SLF4j logs
    compile 'org.slf4j:jcl-over-slf4j:1.7.21'
    
    // This application code will use SLF4J logging API
    compile 'org.slf4j:slf4j-api:1.7.21'
    
    // Got below dependencies from https://logging.apache.org/log4j/2.0/maven-artifacts.html
    // slf4j uses log4j2 framework implementation for logging
    compile 'org.apache.logging.log4j:log4j-api:2.5'
    compile 'org.apache.logging.log4j:log4j-core:2.5'
    
    // Compile time binding of slf4j with log4j2
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.5'

	// Got spring dependency from this URL https://projects.spring.io/spring-framework/
	compile 'org.springframework:spring-context:4.3.0.RC1'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

// Already a process is bound to 8080, hence changing it to 9090
jettyRunWar {
	httpPort = 9090
}

group = 'MyWebApp'